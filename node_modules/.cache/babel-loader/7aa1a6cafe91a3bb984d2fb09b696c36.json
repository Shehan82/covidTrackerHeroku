{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/shehan/Documents/git/covid-19-tracker/covid_tracker/src/Graph.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState } from 'react';\nimport { Bar } from \"react-chartjs-2\";\n\nfunction Graph(props) {\n  _s();\n\n  const url = props.link;\n  console.log(props.link + \" ksjd\");\n  const [lData, setLdata] = useState({\n    labels: [],\n    datasets: [{\n      label: '',\n      data: [],\n      backgroundColor: []\n    }]\n  });\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => {\n      const diff = cases => {\n        var dataArr = Object.values(data.timeline.cases);\n        var newArr = [];\n\n        for (var i = 0; i < dataArr.length - 1; i++) {\n          var difference = dataArr[i + 1] - dataArr[i];\n          newArr.push(difference);\n        }\n\n        console.log(newArr);\n        return newArr;\n      };\n\n      const colors = num => {\n        var colorsArr = [];\n\n        for (var i = 0; i < Object.values(num).length - 1; i++) {\n          colorsArr.push('rgba(255, 99, 132, 0.7)');\n        }\n\n        return colorsArr;\n      };\n\n      diff(data.timeline.cases);\n      setLdata({\n        labels: Object.keys(data.timeline.cases),\n        datasets: [{\n          label: 'Corona cases',\n          data: diff(data.timeline.cases),\n          backgroundColor: colors(data.timeline.cases)\n        }]\n      });\n    });\n  }, [url]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: lData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Graph, \"QoF8zBLKP/xI8ETCi+dCS6SfbXw=\");\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/shehan/Documents/git/covid-19-tracker/covid_tracker/src/Graph.jsx"],"names":["React","useEffect","useState","Bar","Graph","props","url","link","console","log","lData","setLdata","labels","datasets","label","data","backgroundColor","fetch","then","res","json","diff","cases","dataArr","Object","values","timeline","newArr","i","length","difference","push","colors","num","colorsArr","keys"],"mappings":";;;;;AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,GAAT,QAAmB,iBAAnB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAClB,QAAMC,GAAG,GAAGD,KAAK,CAACE,IAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACE,IAAN,GAAa,OAAzB;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC;AAC/BU,IAAAA,MAAM,EAAE,EADuB;AAE/BC,IAAAA,QAAQ,EAAC,CACL;AACIC,MAAAA,KAAK,EAAC,EADV;AAEIC,MAAAA,IAAI,EAAC,EAFT;AAGIC,MAAAA,eAAe,EAAC;AAHpB,KADK;AAFsB,GAAD,CAAlC;AAWAf,EAAAA,SAAS,CAAC,MAAM;AAEZgB,IAAAA,KAAK,CAACX,GAAD,CAAL,CACCY,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMH,IAAI,IAAI;AACV,YAAMM,IAAI,GAAIC,KAAD,IAAS;AAClB,YAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcV,IAAI,CAACW,QAAL,CAAcJ,KAA5B,CAAd;AACA,YAAIK,MAAM,GAAG,EAAb;;AACA,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,OAAO,CAACM,MAAR,GAAe,CAA9B,EAAgCD,CAAC,EAAjC,EACA;AACI,cAAIE,UAAU,GAAGP,OAAO,CAACK,CAAC,GAAC,CAAH,CAAP,GAAeL,OAAO,CAACK,CAAD,CAAvC;AACAD,UAAAA,MAAM,CAACI,IAAP,CAAYD,UAAZ;AAEH;;AAEDtB,QAAAA,OAAO,CAACC,GAAR,CAAYkB,MAAZ;AACA,eAAOA,MAAP;AAEH,OAbD;;AAeA,YAAMK,MAAM,GAAIC,GAAD,IAAS;AACpB,YAAIC,SAAS,GAAG,EAAhB;;AACA,aAAI,IAAIN,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,MAAM,CAACC,MAAP,CAAcQ,GAAd,EAAmBJ,MAAnB,GAA0B,CAAzC,EAA4CD,CAAC,EAA7C,EACA;AACIM,UAAAA,SAAS,CAACH,IAAV,CAAe,yBAAf;AACH;;AACA,eAAOG,SAAP;AACJ,OAPD;;AASAb,MAAAA,IAAI,CAACN,IAAI,CAACW,QAAL,CAAcJ,KAAf,CAAJ;AAEAX,MAAAA,QAAQ,CAAC;AACLC,QAAAA,MAAM,EAACY,MAAM,CAACW,IAAP,CAAYpB,IAAI,CAACW,QAAL,CAAcJ,KAA1B,CADF;AAELT,QAAAA,QAAQ,EAAC,CACL;AACIC,UAAAA,KAAK,EAAC,cADV;AAEIC,UAAAA,IAAI,EAAEM,IAAI,CAACN,IAAI,CAACW,QAAL,CAAcJ,KAAf,CAFd;AAGIN,UAAAA,eAAe,EAACgB,MAAM,CAACjB,IAAI,CAACW,QAAL,CAAcJ,KAAf;AAH1B,SADK;AAFJ,OAAD,CAAR;AAaH,KA1CD;AA2CH,GA7CQ,EA6CN,CAAChB,GAAD,CA7CM,CAAT;AA8CA,sBACI;AAAA,2BAEI,QAAC,GAAD;AAAK,MAAA,IAAI,EAAEI;AAAX;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAnEQN,K;;KAAAA,K;AAqET,eAAeA,KAAf","sourcesContent":["import {React, useEffect, useState} from 'react';\nimport { Bar} from \"react-chartjs-2\"\n\nfunction Graph(props) {\n    const url = props.link;\n    console.log(props.link + \" ksjd\");\n    const [lData, setLdata] = useState({\n        labels: [],\n        datasets:[\n            {\n                label:'',\n                data:[],\n                backgroundColor:[]\n            }\n        ]\n    });\n    \n    useEffect(() => {\n       \n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            const diff = (cases)=>{\n                var dataArr = Object.values(data.timeline.cases);\n                var newArr = [];\n                for(var i=0; i<dataArr.length-1;i++)\n                {\n                    var difference = dataArr[i+1] - dataArr[i];\n                    newArr.push(difference);\n                    \n                }\n\n                console.log(newArr);\n                return newArr;\n                \n            }\n\n            const colors = (num) => {\n                var colorsArr = [];\n                for(var i=0; i<Object.values(num).length-1; i++)\n                {\n                    colorsArr.push('rgba(255, 99, 132, 0.7)');\n                }\n                 return colorsArr;\n            }\n\n            diff(data.timeline.cases);\n          \n            setLdata({\n                labels:Object.keys(data.timeline.cases),\n                datasets:[\n                    {\n                        label:'Corona cases',\n                        data: diff(data.timeline.cases),\n                        backgroundColor:colors(data.timeline.cases)\n                    }\n                ]\n\n            });\n         \n\n        })\n    }, [url])\n    return (\n        <div>\n            \n            <Bar data={lData} />\n\n        </div>\n    )\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}